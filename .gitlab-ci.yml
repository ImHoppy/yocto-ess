variables:
  GIT_SUBMODULE_STRATEGY: recursive
  LANG: en_US.UTF-8

stages:
  - build
  - release

build_image:
  tags:
    - yocto
  stage: build
  image: crops/yocto:debian-9-base
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.esss.lu.se >> ~/.ssh/known_hosts
  script:
    - . ./setup-env -m ifc14xx-64b -j 8 -t 8
    - bitbake ifc14xx-image
    - bitbake tar
    - bitbake bzip2
    - bitbake hdf5
    - bitbake python-numpy
    - bitbake python3-numpy
    - bitbake package-index
  artifacts:
    paths:
      - build_ifc14xx-64b/tmp/deploy/images/ifc14xx-64b
      - sstate-cache/
      - downloads/
      - build_ifc14xx-64b/tmp/deploy/rpm
    expire_in: 24 hour

build_image_rt:
  tags:
    - yocto
  stage: build
  image: crops/yocto:debian-9-base
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.esss.lu.se >> ~/.ssh/known_hosts
  script:
    - . ./setup-env -m ifc14xx-rt-64b -j 8 -t 8
    - bitbake ifc14xx-image
    - bitbake package-index
  artifacts:
    paths:
      - build_ifc14xx-rt-64b/tmp/deploy/images/ifc14xx-rt-64b
      - sstate-cache/
      - downloads/
      - build_ifc14xx-rt-64b/tmp/deploy/rpm
    expire_in: 24 hour

build_toolchain:
  tags:
    - yocto
  stage: build
  image: crops/yocto:debian-9-base
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.esss.lu.se >> ~/.ssh/known_hosts
  script:
    - . ./setup-env -m ifc14xx-64b -j 8 -t 8
    - bitbake ifc14xx-toolchain
  artifacts:
    paths:
      - build_ifc14xx-64b/tmp/deploy/sdk
      - sstate-cache/
      - downloads/
    expire_in: 24 hour

build_image_cct:
  tags:
    - yocto
  stage: build
  image: crops/yocto:debian-9-base
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.esss.lu.se >> ~/.ssh/known_hosts
  script:
    - . ./setup-env -m cct-64 -j 8 -t 8
    - bitbake cct-image
    - bitbake tar
    - bitbake bzip2
    - bitbake hdf5
    - bitbake python-numpy
    - bitbake python3-numpy
    - bitbake package-index
  artifacts:
    paths:
      - build_cct-64/tmp/deploy/images/cct-64
      - sstate-cache/
      - downloads/
      - build_cct-64/tmp/deploy/rpm
    expire_in: 24 hour

build_image_rt_cct:
  tags:
    - yocto
  stage: build
  image: crops/yocto:debian-9-base
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.esss.lu.se >> ~/.ssh/known_hosts
  script:
    - . ./setup-env -m cct-rt-64 -j 8 -t 8
    - bitbake cct-image
    - bitbake package-index
  artifacts:
    paths:
      - build_cct-rt-64/tmp/deploy/images/cct-rt-64
      - sstate-cache/
      - downloads/
      - build_cct-rt-64/tmp/deploy/rpm
    expire_in: 24 hour

build_toolchain_cct:
  tags:
    - yocto
  stage: build
  image: crops/yocto:debian-9-base
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.esss.lu.se >> ~/.ssh/known_hosts
  script:
    - . ./setup-env -m cct-64 -j 8 -t 8
    - bitbake cct-toolchain
  artifacts:
    paths:
      - build_cct-64/tmp/deploy/sdk
      - sstate-cache/
      - downloads/
    expire_in: 24 hour

release_sstate:
  variables:
    GIT_STRATEGY: none
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd sstate-cache && jfrog rt upload --flat=false "*" yocto/sstate/

release_downloads:
  variables:
    GIT_STRATEGY: none
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd downloads && find . -type f -name '*.done' -exec rm {} + && if [ -d git2 ]; then rm -r git2/; fi
    - jfrog rt upload --flat=false "*.tar.bz2" yocto/downloads/
    - jfrog rt upload --flat=false "*.tar.gz" yocto/downloads/
    - jfrog rt upload --flat=false "*.tar.xz" yocto/downloads/
    - jfrog rt upload --flat=false "*.tgz" yocto/downloads/
    - jfrog rt upload --flat=false "*.zip" yocto/downloads/

release_images_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-64b/tmp/deploy/images/ifc14xx-64b && echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" boot-images/ioxos/$CI_COMMIT_TAG/

release_images_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-64b/tmp/deploy/images/ifc14xx-64b && echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" boot-images/ioxos/$CI_PIPELINE_ID/

release_images_rt_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-rt-64b/tmp/deploy/images/ifc14xx-rt-64b
    - jfrog rt upload --flat=false "*" boot-images/ioxos/$CI_COMMIT_TAG/rt/

release_images_rt_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-rt-64b/tmp/deploy/images/ifc14xx-rt-64b
    - jfrog rt upload --flat=false "*" boot-images/ioxos/$CI_PIPELINE_ID/rt/

release_toolchain_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-64b/tmp/deploy/sdk
    - echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" yocto/toolchain/$CI_PIPELINE_ID/

release_toolchain_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-64b/tmp/deploy/sdk
    - jfrog rt upload --flat=false "*" yocto/toolchain/
    - echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" yocto/toolchain/$CI_COMMIT_TAG/

release_images_cct_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-64/tmp/deploy/images/cct-64 && echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" boot-images/cct/$CI_COMMIT_TAG/

release_images_cct_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-64/tmp/deploy/images/cct-64 && echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" boot-images/cct/$CI_PIPELINE_ID/

release_images_rt_cct_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-rt-64/tmp/deploy/images/cct-rt-64
    - jfrog rt upload --flat=false "*" boot-images/cct/$CI_COMMIT_TAG/rt/

release_images_rt_cct_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-rt-64/tmp/deploy/images/cct-rt-64
    - jfrog rt upload --flat=false "*" boot-images/cct/$CI_PIPELINE_ID/rt/

release_toolchain_cct_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-64/tmp/deploy/sdk
    - echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" yocto/toolchain/$CI_PIPELINE_ID/

release_toolchain_cct_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-64/tmp/deploy/sdk
    - jfrog rt upload --flat=false "*" yocto/toolchain/
    - echo $CI_COMMIT_SHA > SHA-$CI_COMMIT_SHA
    - jfrog rt upload --flat=false "*" yocto/toolchain/$CI_COMMIT_TAG/

release_rpm_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-64b/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tsc-dev*;tsc-dbg*"
    - jfrog rt upload --flat=false "tscmon-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tscmon-dev*;tscmon-dbg*"
    - jfrog rt upload --flat=false "hdf5-*.rpm" rpm-ics/ioxos/ --exclude-patterns="hdf5-dev*;hdf5-dbg*"
    - jfrog rt upload --flat=false "tar-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tar-dev*;tar-dbg*"
    - jfrog rt upload --flat=false "bzip2-*.rpm" rpm-ics/ioxos/ --exclude-patterns="bzip2-dev*;bzip2-dbg*"
    - jfrog rt upload --flat=false "python-*.rpm" rpm-ics/ioxos/ --exclude-patterns="*-dev-*;*-dbg-*"
    - jfrog rt upload --flat=false "python3-*.rpm" rpm-ics/ioxos/ --exclude-patterns="*-dev-*;*-dbg-*"
    - cd ../../../../build_ifc14xx-rt-64b/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tsc-dev*;tsc-dbg*"

release_rpm_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_ifc14xx-64b/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tsc-dev*;tsc-dbg*"
    - jfrog rt upload --flat=false "tscmon-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tscmon-dev*;tscmon-dbg*"
    - jfrog rt upload --flat=false "hdf5-*.rpm" rpm-ics/ioxos/ --exclude-patterns="hdf5-dev*;hdf5-dbg*"
    - jfrog rt upload --flat=false "tar-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tar-dev*;tar-dbg*"
    - jfrog rt upload --flat=false "bzip2-*.rpm" rpm-ics/ioxos/ --exclude-patterns="bzip2-dev*;bzip2-dbg*"
    - jfrog rt upload --flat=false "python-*.rpm" rpm-ics/ioxos/ --exclude-patterns="*-dev-*;*-dbg-*"
    - jfrog rt upload --flat=false "python3-*.rpm" rpm-ics/ioxos/ --exclude-patterns="*-dev-*;*-dbg-*"
    - cd ../../../../build_ifc14xx-rt-64b/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/ioxos/ --exclude-patterns="tsc-dev*;tsc-dbg*"

release_rpm_cct_tags:
  variables:
    GIT_STRATEGY: none
  only:
    - tags
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-64/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/cct/ --exclude-patterns="tsc-dev*;tsc-dbg*"
    - jfrog rt upload --flat=false "tscmon-*.rpm" rpm-ics/cct/ --exclude-patterns="tscmon-dev*;tscmon-dbg*"
    - jfrog rt upload --flat=false "hdf5-*.rpm" rpm-ics/cct/ --exclude-patterns="hdf5-dev*;hdf5-dbg*"
    - jfrog rt upload --flat=false "tar-*.rpm" rpm-ics/cct/ --exclude-patterns="tar-dev*;tar-dbg*"
    - jfrog rt upload --flat=false "bzip2-*.rpm" rpm-ics/cct/ --exclude-patterns="bzip2-dev*;bzip2-dbg*"
    - jfrog rt upload --flat=false "python-*.rpm" rpm-ics/cct/ --exclude-patterns="*-dev-*;*-dbg-*"
    - jfrog rt upload --flat=false "python3-*.rpm" rpm-ics/cct/ --exclude-patterns="*-dev-*;*-dbg-*"
    - cd ../../../../build_cct-rt-64/tmp/deploy/rpm/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/cct/ --exclude-patterns="tsc-dev*;tsc-dbg*"

release_rpm_cct_web:
  variables:
    GIT_STRATEGY: none
  only:
    - web
  tags:
    - yocto
  stage: release
  image: registry.esss.lu.se/ics-docker/jfrog:latest
  script:
    - jfrog rt config artifactory --url=${ARTIFACTORY_URL} --apikey=${ARTIFACTORY_API_KEY}
    - cd build_cct-64/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/cct/ --exclude-patterns="tsc-dev*;tsc-dbg*"
    - jfrog rt upload --flat=false "tscmon-*.rpm" rpm-ics/cct/ --exclude-patterns="tscmon-dev*;tscmon-dbg*"
    - jfrog rt upload --flat=false "hdf5-*.rpm" rpm-ics/cct/ --exclude-patterns="hdf5-dev*;hdf5-dbg*"
    - jfrog rt upload --flat=false "tar-*.rpm" rpm-ics/cct/ --exclude-patterns="tar-dev*;tar-dbg*"
    - jfrog rt upload --flat=false "bzip2-*.rpm" rpm-ics/cct/ --exclude-patterns="bzip2-dev*;bzip2-dbg*"
    - jfrog rt upload --flat=false "python-*.rpm" rpm-ics/cct/ --exclude-patterns="*-dev-*;*-dbg-*"
    - jfrog rt upload --flat=false "python3-*.rpm" rpm-ics/cct/ --exclude-patterns="*-dev-*;*-dbg-*"
    - cd ../../../../build_cct-rt-64/tmp/deploy/rpm/tmp/deploy/rpm
    - jfrog rt upload --flat=false "tsc-*.rpm" rpm-ics/cct/ --exclude-patterns="tsc-dev*;tsc-dbg*"

